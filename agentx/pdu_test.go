package agentx

import (
	"fmt"
	"testing"

	"github.com/alexispb/mygosnmp/asn"
	"github.com/alexispb/mygosnmp/hex"
	"github.com/alexispb/mygosnmp/internal"
	"github.com/alexispb/mygosnmp/pduerror"
)

var pduEncodingTestData = struct {
	orderFlag [2]Flags
	context   string
	ranges    []SearchRange
	rangesGet []SearchRange
	varbinds  []asn.Varbind
	test      []struct {
		pduTag PduTag
		flags  Flags
		params PayloadParams
		data   [2][]byte
	}
}{
	orderFlag: [2]Flags{
		FlagNetworkByteOrder,
		FlagsNone,
	},
	context: "ctx",
	ranges: []SearchRange{
		{
			StartOid:      []uint32{1, 3, 6, 1, 4, 1, 999, 1},
			EndOid:        []uint32{1, 3, 6, 1, 4, 1, 999, 3},
			StartIncluded: 1,
		},
	},
	rangesGet: []SearchRange{
		{StartOid: []uint32{1, 3, 6, 1, 4, 1, 999, 1, 0}},
	},
	varbinds: []asn.Varbind{
		{
			Oid:   []uint32{1, 3, 6, 1, 4, 1, 999, 1},
			Tag:   asn.TagInteger32,
			Value: int32(56789),
		},
	},
	test: []struct {
		pduTag PduTag
		flags  Flags
		params PayloadParams
		data   [2][]byte
	}{
		{
			pduTag: TagOpen,
			flags:  FlagsNone,
			params: OpenParams{
				Timeout:     10,
				Oid:         []uint32{1, 3, 6, 1, 4, 1, 999},
				Description: "my subagent",
			},
			data: [2][]byte{
				{
					0x01, 0x01, 0x10, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x0A, 0x00, 0x00, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x0B,
					0x6D, 0x79, 0x20, 0x73,
					0x75, 0x62, 0x61, 0x67,
					0x65, 0x6E, 0x74, 0x00,
				},
				{
					0x01, 0x01, 0x00, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x0A, 0x00, 0x00, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x0B, 0x00, 0x00, 0x00,
					0x6D, 0x79, 0x20, 0x73,
					0x75, 0x62, 0x61, 0x67,
					0x65, 0x6E, 0x74, 0x00,
				},
			},
		},
		{
			pduTag: TagClose,
			flags:  FlagsNone,
			params: CloseParams{
				Reason: CloseReasonProtocolError,
			},
			data: [2][]byte{
				{
					0x01, 0x02, 0x10, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x04,
					0x03, 0x00, 0x00, 0x00,
				},
				{
					0x01, 0x02, 0x00, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagRegister,
			flags:  FlagInstanceRegistration,
			params: RegisterParams{
				Timeout:    2,
				Priority:   127,
				RangeSubid: 7,
				Subtree:    []uint32{1, 3, 6, 1, 4, 1, 999, 1},
				UpperBound: uint32(76),
			},
			data: [2][]byte{
				{
					0x01, 0x03, 0x19, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x7F, 0x07, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x00, 0x4C,
				},
				{
					0x01, 0x03, 0x09, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x7F, 0x07, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x4C, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagUnregister,
			flags:  FlagInstanceRegistration,
			params: UnregisterParams{
				Priority:   127,
				RangeSubid: 7,
				Subtree:    []uint32{1, 3, 6, 1, 4, 1, 999, 1},
				UpperBound: uint32(76),
			},
			data: [2][]byte{
				{
					0x01, 0x04, 0x19, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x7F, 0x07, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x00, 0x4C,
				},
				{
					0x01, 0x04, 0x09, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x7F, 0x07, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x4C, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagGet,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x05, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x04, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
				},
				{
					0x01, 0x05, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x04, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagGetNext,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x06, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x28,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x03, 0x04, 0x01, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x03,
				},
				{
					0x01, 0x06, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x28, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x03, 0x04, 0x01, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagGetBulk,
			flags:  FlagsNone,
			params: GetBulkParams{
				NonRepeaters:    7,
				MaxRepeatitions: 10,
			},
			data: [2][]byte{
				{
					0x01, 0x07, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x2C,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x07, 0x00, 0x0A,
					0x03, 0x04, 0x01, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x03,
				},
				{
					0x01, 0x07, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x2C, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x07, 0x00, 0x0A, 0x00,
					0x03, 0x04, 0x01, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagTestSet,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x08, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x02, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0xDD, 0xD5,
				},
				{
					0x01, 0x08, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xD5, 0xDD, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagCommitSet,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x09, 0x10, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x00,
				},
				{
					0x01, 0x09, 0x00, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagUndoSet,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0A, 0x10, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x00,
				},
				{
					0x01, 0x0A, 0x00, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagCleanupSet,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0B, 0x10, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x00,
				},
				{
					0x01, 0x0B, 0x00, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagNotify,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0C, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x02, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0xDD, 0xD5,
				},
				{
					0x01, 0x0C, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xD5, 0xDD, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagPing,
			flags:  FlagsNone,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0D, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x08,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
				},
				{
					0x01, 0x0D, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x08, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
				},
			},
		},
		{
			pduTag: TagIndexAllocate,
			flags:  FlagNewIndex,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0E, 0x1A, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x02, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0xDD, 0xD5,
				},
				{
					0x01, 0x0E, 0x0A, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xD5, 0xDD, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagIndexDeallocate,
			flags:  FlagNewIndex,
			params: NoParams{},
			data: [2][]byte{
				{
					0x01, 0x0F, 0x1A, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x20,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x02, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0xDD, 0xD5,
				},
				{
					0x01, 0x0F, 0x0A, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x20, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xD5, 0xDD, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagAddAgentCaps,
			flags:  FlagsNone,
			params: AddAgentCapsParams{
				Oid:         []uint32{1, 3, 6, 1, 4, 1, 999},
				Description: "caps",
			},
			data: [2][]byte{
				{
					0x01, 0x10, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x1C,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x04,
					0x63, 0x61, 0x70, 0x73,
				},
				{
					0x01, 0x10, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x1C, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x63, 0x61, 0x70, 0x73,
				},
			},
		},
		{
			pduTag: TagRemoveAgentCaps,
			flags:  FlagsNone,
			params: RemoveAgentCapsParams{
				Oid: []uint32{1, 3, 6, 1, 4, 1, 999},
			},
			data: [2][]byte{
				{
					0x01, 0x11, 0x18, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x14,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
				},
				{
					0x01, 0x11, 0x08, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x14, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x02, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
				},
			},
		},
		{
			pduTag: TagResponse,
			flags:  FlagInstanceRegistration,
			params: ResponseParams{
				SysUpTime: 512,
				Error:     pduerror.DuplicateRegistration,
				Index:     3,
			},
			data: [2][]byte{
				{
					0x01, 0x12, 0x19, 0x00,
					0x00, 0x00, 0x00, 0x65,
					0x00, 0x00, 0x00, 0xC9,
					0x00, 0x00, 0x01, 0x2D,
					0x00, 0x00, 0x00, 0x28,
					0x00, 0x00, 0x00, 0x03,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x00, 0x02, 0x00,
					0x01, 0x07, 0x00, 0x03,
					0x00, 0x02, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0x03, 0xE7,
					0x00, 0x00, 0x00, 0x01,
					0x00, 0x00, 0xDD, 0xD5,
				},
				{
					0x01, 0x12, 0x09, 0x00,
					0x65, 0x00, 0x00, 0x00,
					0xC9, 0x00, 0x00, 0x00,
					0x2D, 0x01, 0x00, 0x00,
					0x28, 0x00, 0x00, 0x00,
					0x03, 0x00, 0x00, 0x00,
					0x63, 0x74, 0x78, 0x00,
					0x00, 0x02, 0x00, 0x00,
					0x07, 0x01, 0x03, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x03, 0x04, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xE7, 0x03, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0xD5, 0xDD, 0x00, 0x00,
				},
			},
		},
	},
}

func TestPduEncoding(t *testing.T) {
	for i, orderFlag := range pduEncodingTestData.orderFlag {
		order := orderFlag.byteOrder()
		for _, test := range pduEncodingTestData.test {
			testid := fmt.Sprintf("%sPdu %s\n", test.pduTag.String(), order.String())

			pdu := Pdu{
				Tag:           test.pduTag,
				Flags:         test.flags | orderFlag,
				SessionId:     101,
				TransactionId: 201,
				PacketId:      301,
				PayloadSize:   int32(len(test.data[i]) - PduHeaderSize),
				Params:        test.params,
			}
			if pduTable[pdu.Tag].allowedFlags&FlagNonDefaultContext != 0 {
				pdu.Flags |= FlagNonDefaultContext
				pdu.Context = pduEncodingTestData.context
			}
			if pduTable[pdu.Tag].includesRanges {
				if pdu.Tag == TagGet {
					pdu.Ranges = pduEncodingTestData.rangesGet
				} else {
					pdu.Ranges = pduEncodingTestData.ranges
				}
			}
			if pduTable[pdu.Tag].includesVarbinds {
				pdu.Varbinds = pduEncodingTestData.varbinds
			}

			payloadSize := pdu.countPayloadSize()
			if int32(payloadSize) != pdu.PayloadSize {
				t.Errorf("%sinvalid evaluated payload size: %d != %d",
					testid, payloadSize, pdu.PayloadSize)
			}

			data, ok := EncodePdu(pdu)

			if !ok {
				t.Errorf("%sfailed to encode",
					testid)
			} else if diff := hex.DumpDiff(test.data[i], data); len(diff) != 0 {
				t.Errorf("%sinvalid encoded data:\n%s",
					testid, diff)
			}

			pduDecoded, ok := DecodePduHeader(test.data[i][:PduHeaderSize])

			if !ok {
				t.Errorf("%sfailed to decode pdu header",
					testid)
			} else if !DecodePduPayload(&pduDecoded, test.data[i][PduHeaderSize:]) {
				t.Errorf("%sfailed to decode pdu payload",
					testid)
			} else if diff := internal.StructsDiff(pdu, pduDecoded); len(diff) != 0 {
				t.Errorf("%sinvalid decoded pdu:\n%s",
					testid, diff)
			}

			data, ok = EncodePduDbg(pdu, lognone)

			if !ok {
				t.Errorf("%sfailed to debug-encode",
					testid)
			} else if diff := hex.DumpDiff(test.data[i], data); len(diff) != 0 {
				t.Errorf("%sinvalid debug-encoded data:\n%s",
					testid, diff)
			}

			pduDecoded, ok = DecodePduHeaderDbg(test.data[i][:PduHeaderSize], lognone)

			if !ok {
				t.Errorf("%sfailed to debug-decode pdu header",
					testid)
			} else if !DecodePduPayloadDbg(&pduDecoded, test.data[i][PduHeaderSize:], lognone) {
				t.Errorf("%sfailed to debug-decode pdu payload",
					testid)
			} else if diff := internal.StructsDiff(pdu, pduDecoded); len(diff) != 0 {
				t.Errorf("%sinvalid decoded-decoded pdu:\n%s",
					testid, diff)
			}
		}
	}
}
